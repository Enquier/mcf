/*
 * MMS Reference Implementation API
 * Documentation for MMS API
 *
 * OpenAPI spec version: 4.0.3
 * Contact: mms@openmbee.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient';
import { ElementsResponse } from '../model/ElementsResponse';

/**
 * Artifacts service.
 *
 * @module api/ArtifactsApi
 * @version 4.0.3
 */
export class ArtifactsApi {
  /**
   * Constructs a new ArtifactsApi.
   *
   * @alias module:api/ArtifactsApi
   * @class
   * @param {module:ApiClient} [apiClient] - Optional API client implementation to use,
   * default to {@link module:ApiClient#instanc
    e} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createOrUpdateArtifacts operation.
   *
   * @callback moduleapi/ArtifactsApi~createOrUpdateArtifactsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/ElementsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} projectId
   * @param {string} refId
   * @param {string} elementId
   * @param {object} opts - Optional parameters.
   * @param {Blob} opts.file
   * @param {module:api/ArtifactsApi~createOrUpdateArtifactsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  createOrUpdateArtifacts(projectId, refId, elementId, opts, callback) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling createOrUpdateArtifacts");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling createOrUpdateArtifacts");
    }
    // verify the required parameter 'elementId' is set
    if (elementId === undefined || elementId === null) {
      throw new Error("Missing the required parameter 'elementId' when calling createOrUpdateArtifacts");
    }

    const pathParams = {
      projectId, refId, elementId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {
      file: opts.file,
    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['multipart/form-data'];
    const accepts = ['application/json'];
    const returnType = ElementsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/elements/{elementId}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the deleteArtifactByExtension operation.
   *
   * @callback moduleapi/ArtifactsApi~deleteArtifactByExtensionCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/ElementsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} projectId
   * @param {string} refId
   * @param {string} elementId
   * @param {string} extension
   * @param {module:api/ArtifactsApi~deleteArtifactByExtensionCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  deleteArtifactByExtension(projectId, refId, elementId, extension, callback) {
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling deleteArtifactByExtension");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling deleteArtifactByExtension");
    }
    // verify the required parameter 'elementId' is set
    if (elementId === undefined || elementId === null) {
      throw new Error("Missing the required parameter 'elementId' when calling deleteArtifactByExtension");
    }
    // verify the required parameter 'extension' is set
    if (extension === undefined || extension === null) {
      throw new Error("Missing the required parameter 'extension' when calling deleteArtifactByExtension");
    }

    const pathParams = {
      projectId, refId, elementId, extension,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = ElementsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/elements/{elementId}/{extension}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getArtifactByExtension operation.
   *
   * @callback moduleapi/ArtifactsApi~getArtifactByExtensionCallback
   * @param {string} error - Error message, if any.
   * @param {'String'{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} projectId
   * @param {string} refId
   * @param {string} elementId
   * @param {string} extension
   * @param {object} opts - Optional parameters.
   * @param {string} opts.commitId
   * @param {module:api/ArtifactsApi~getArtifactByExtensionCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getArtifactByExtension(projectId, refId, elementId, extension, opts, callback) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getArtifactByExtension");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getArtifactByExtension");
    }
    // verify the required parameter 'elementId' is set
    if (elementId === undefined || elementId === null) {
      throw new Error("Missing the required parameter 'elementId' when calling getArtifactByExtension");
    }
    // verify the required parameter 'extension' is set
    if (extension === undefined || extension === null) {
      throw new Error("Missing the required parameter 'extension' when calling getArtifactByExtension");
    }

    const pathParams = {
      projectId, refId, elementId, extension,
    };
    const queryParams = {
      commitId: opts.commitId,
    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = 'String';

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/elements/{elementId}/{extension}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
}
