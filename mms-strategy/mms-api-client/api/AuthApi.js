/*
 * MMS Reference Implementation API
 * Documentation for MMS API
 *
 * OpenAPI spec version: 4.0.3
 * Contact: mms@openmbee.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient';
import { JwtAuthenticationRequest } from '../model/JwtAuthenticationRequest';
import { JwtAuthenticationResponse } from '../model/JwtAuthenticationResponse';
import { JwtTokenValidationResponse } from '../model/JwtTokenValidationResponse';
import { PermissionLookupRequest } from '../model/PermissionLookupRequest';
import { PermissionLookupResponse } from '../model/PermissionLookupResponse';
import { PermissionUpdatesResponse } from '../model/PermissionUpdatesResponse';
import { PermissionsRequest } from '../model/PermissionsRequest';
import { PermissionsResponse } from '../model/PermissionsResponse';
import { UserCreateRequest } from '../model/UserCreateRequest';
import { UsersResponse } from '../model/UsersResponse';

/**
 * Auth service.
 *
 * @module api/AuthApi
 * @version 4.0.3
 */
export class AuthApi {
  /**
   * Constructs a new AuthApi.
   *
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} [apiClient] - Optional API client implementation to use,
   * default to {@link module:ApiClient#instanc
    e} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the checkAuthenticationToken operation.
   *
   * @callback moduleapi/AuthApi~checkAuthenticationTokenCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/JwtTokenValidationResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:api/AuthApi~checkAuthenticationTokenCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  checkAuthenticationToken(callback) {
    const postBody = null;

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = JwtTokenValidationResponse;

    return this.apiClient.callApi(
      '/checkAuth',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the createAuthenticationToken operation.
   *
   * @callback moduleapi/AuthApi~createAuthenticationTokenCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/JwtAuthenticationResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/JwtAuthenticationRequest} body
   * @param {module:api/AuthApi~createAuthenticationTokenCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  createAuthenticationToken(body, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createAuthenticationToken");
    }

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = [];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = JwtAuthenticationResponse;

    return this.apiClient.callApi(
      '/authentication',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the createUser operation.
   *
   * @callback moduleapi/AuthApi~createUserCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/UserCreateRequest{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/UserCreateRequest} body
   * @param {module:api/AuthApi~createUserCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  createUser(body, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createUser");
    }

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = UserCreateRequest;

    return this.apiClient.callApi(
      '/user',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getAuthenticationToken operation.
   *
   * @callback moduleapi/AuthApi~getAuthenticationTokenCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/JwtAuthenticationResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:api/AuthApi~getAuthenticationTokenCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  getAuthenticationToken(callback) {
    const postBody = null;

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = JwtAuthenticationResponse;

    return this.apiClient.callApi(
      '/authentication',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getBranchPermissions operation.
   *
   * @callback moduleapi/AuthApi~getBranchPermissionsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/PermissionsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} projectId
   * @param {string} refId
   * @param {module:api/AuthApi~getBranchPermissionsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  getBranchPermissions(projectId, refId, callback) {
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getBranchPermissions");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getBranchPermissions");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = PermissionsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/permissions',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getOrgPermissions operation.
   *
   * @callback moduleapi/AuthApi~getOrgPermissionsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/PermissionsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} orgId
   * @param {module:api/AuthApi~getOrgPermissionsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  getOrgPermissions(orgId, callback) {
    const postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId === undefined || orgId === null) {
      throw new Error("Missing the required parameter 'orgId' when calling getOrgPermissions");
    }

    const pathParams = {
      orgId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = PermissionsResponse;

    return this.apiClient.callApi(
      '/orgs/{orgId}/permissions',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getProjectPermissions operation.
   *
   * @callback moduleapi/AuthApi~getProjectPermissionsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/PermissionsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} projectId
   * @param {module:api/AuthApi~getProjectPermissionsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  getProjectPermissions(projectId, callback) {
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getProjectPermissions");
    }

    const pathParams = {
      projectId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = PermissionsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/permissions',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getUsers operation.
   *
   * @callback moduleapi/AuthApi~getUsersCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/UsersResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:api/AuthApi~getUsersCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  getUsers(callback) {
    const postBody = null;

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = UsersResponse;

    return this.apiClient.callApi(
      '/users',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the lookupPermissions operation.
   *
   * @callback moduleapi/AuthApi~lookupPermissionsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/PermissionLookupResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/PermissionLookupRequest} body
   * @param {module:api/AuthApi~lookupPermissionsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  lookupPermissions(body, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling lookupPermissions");
    }

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = PermissionLookupResponse;

    return this.apiClient.callApi(
      '/permissions',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the updateBranchPermissions operation.
   *
   * @callback moduleapi/AuthApi~updateBranchPermissionsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/PermissionUpdatesResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/PermissionsRequest} body
   * @param {string} projectId
   * @param {string} refId
   * @param {module:api/AuthApi~updateBranchPermissionsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  updateBranchPermissions(body, projectId, refId, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateBranchPermissions");
    }
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling updateBranchPermissions");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling updateBranchPermissions");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = PermissionUpdatesResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/permissions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the updateOrgPermissions operation.
   *
   * @callback moduleapi/AuthApi~updateOrgPermissionsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/PermissionUpdatesResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/PermissionsRequest} body
   * @param {string} orgId
   * @param {module:api/AuthApi~updateOrgPermissionsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  updateOrgPermissions(body, orgId, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateOrgPermissions");
    }
    // verify the required parameter 'orgId' is set
    if (orgId === undefined || orgId === null) {
      throw new Error("Missing the required parameter 'orgId' when calling updateOrgPermissions");
    }

    const pathParams = {
      orgId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = PermissionUpdatesResponse;

    return this.apiClient.callApi(
      '/orgs/{orgId}/permissions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the updatePassword operation.
   *
   * @callback moduleapi/AuthApi~updatePasswordCallback
   * @param {string} error - Error message, if any.
   * @param {Object{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/UserCreateRequest} body
   * @param {module:api/AuthApi~updatePasswordCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  updatePassword(body, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updatePassword");
    }

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = Object;

    return this.apiClient.callApi(
      '/password',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the updateProjectPermissions operation.
   *
   * @callback moduleapi/AuthApi~updateProjectPermissionsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/PermissionUpdatesResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/PermissionsRequest} body
   * @param {string} projectId
   * @param {module:api/AuthApi~updateProjectPermissionsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  updateProjectPermissions(body, projectId, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateProjectPermissions");
    }
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling updateProjectPermissions");
    }

    const pathParams = {
      projectId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = PermissionUpdatesResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/permissions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
}
