/*
 * MMS Reference Implementation API
 * Documentation for MMS API
 *
 * OpenAPI spec version: 4.0.3
 * Contact: mms@openmbee.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient';
import { CommitsRequest } from '../model/CommitsRequest';
import { CommitsResponse } from '../model/CommitsResponse';

/**
* Commits service.
* @module api/CommitsApi
* @version 4.0.3
*/
export class CommitsApi {
  /**
    * Constructs a new CommitsApi.
    * @alias module:api/CommitsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
     * Callback function to receive the result of the getCommit operation.
     * @callback moduleapi/CommitsApi~getCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} projectId
     * @param {String} commitId
     * @param {module:api/CommitsApi~getCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getCommit(projectId, commitId, callback) {
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getCommit");
    }
    // verify the required parameter 'commitId' is set
    if (commitId === undefined || commitId === null) {
      throw new Error("Missing the required parameter 'commitId' when calling getCommit");
    }

    const pathParams = {
      projectId, commitId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = CommitsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/commits/{commitId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getCommits operation.
     * @callback moduleapi/CommitsApi~getCommitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {module:model/CommitsRequest} body
     * @param {String} projectId
     * @param {module:api/CommitsApi~getCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getCommits(body, projectId, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling getCommits");
    }
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getCommits");
    }

    const pathParams = {
      projectId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = CommitsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/commits',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getElementCommits operation.
     * @callback moduleapi/CommitsApi~getElementCommitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} projectId
     * @param {String} refId
     * @param {String} elementId
     * @param {module:api/CommitsApi~getElementCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getElementCommits(projectId, refId, elementId, callback) {
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getElementCommits");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getElementCommits");
    }
    // verify the required parameter 'elementId' is set
    if (elementId === undefined || elementId === null) {
      throw new Error("Missing the required parameter 'elementId' when calling getElementCommits");
    }

    const pathParams = {
      projectId, refId, elementId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = CommitsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/elements/{elementId}/commits',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getRefCommits operation.
     * @callback moduleapi/CommitsApi~getRefCommitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} projectId
     * @param {String} refId
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit
     * @param {String} opts.maxTimestamp
     * @param {module:api/CommitsApi~getRefCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getRefCommits(projectId, refId, opts, callback) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getRefCommits");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getRefCommits");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {
      limit: opts.limit, maxTimestamp: opts.maxTimestamp,
    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = CommitsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/commits',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
}
