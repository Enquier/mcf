/*
 * MMS Reference Implementation API
 * Documentation for MMS API
 *
 * OpenAPI spec version: 4.0.3
 * Contact: mms@openmbee.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient';
import { GroupResponse } from '../model/GroupResponse';
import { GroupUpdateRequest } from '../model/GroupUpdateRequest';
import { GroupUpdateResponse } from '../model/GroupUpdateResponse';
import { GroupsResponse } from '../model/GroupsResponse';

/**
* Groups service.
* @module api/GroupsApi
* @version 4.0.3
*/
export class GroupsApi {
  /**
    * Constructs a new GroupsApi.
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
     * Callback function to receive the result of the createLocalGroup operation.
     * @callback moduleapi/GroupsApi~createLocalGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} group
     * @param {module:api/GroupsApi~createLocalGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
  createLocalGroup(group, callback) {
    const postBody = null;
    // verify the required parameter 'group' is set
    if (group === undefined || group === null) {
      throw new Error("Missing the required parameter 'group' when calling createLocalGroup");
    }

    const pathParams = {
      group,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = [];
    const returnType = null;

    return this.apiClient.callApi(
      '/groups/{group}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the deleteLocalGroup operation.
     * @callback moduleapi/GroupsApi~deleteLocalGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} group
     * @param {module:api/GroupsApi~deleteLocalGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
  deleteLocalGroup(group, callback) {
    const postBody = null;
    // verify the required parameter 'group' is set
    if (group === undefined || group === null) {
      throw new Error("Missing the required parameter 'group' when calling deleteLocalGroup");
    }

    const pathParams = {
      group,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = [];
    const returnType = null;

    return this.apiClient.callApi(
      '/groups/{group}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getAllGroups operation.
     * @callback moduleapi/GroupsApi~getAllGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {module:api/GroupsApi~getAllGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getAllGroups(callback) {
    const postBody = null;

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = GroupsResponse;

    return this.apiClient.callApi(
      '/groups',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getGroup operation.
     * @callback moduleapi/GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} group
     * @param {module:api/GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getGroup(group, callback) {
    const postBody = null;
    // verify the required parameter 'group' is set
    if (group === undefined || group === null) {
      throw new Error("Missing the required parameter 'group' when calling getGroup");
    }

    const pathParams = {
      group,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = GroupResponse;

    return this.apiClient.callApi(
      '/groups/{group}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the updateGroupUsers operation.
     * @callback moduleapi/GroupsApi~updateGroupUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupUpdateResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {module:model/GroupUpdateRequest} body
     * @param {String} group
     * @param {module:api/GroupsApi~updateGroupUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  updateGroupUsers(body, group, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateGroupUsers");
    }
    // verify the required parameter 'group' is set
    if (group === undefined || group === null) {
      throw new Error("Missing the required parameter 'group' when calling updateGroupUsers");
    }

    const pathParams = {
      group,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = GroupUpdateResponse;

    return this.apiClient.callApi(
      '/groups/{group}/users',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
}
