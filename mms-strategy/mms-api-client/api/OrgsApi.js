/*
 * MMS Reference Implementation API
 * Documentation for MMS API
 *
 * OpenAPI spec version: 4.0.3
 * Contact: mms@openmbee.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient';
import { OrganizationsRequest } from '../model/OrganizationsRequest';
import { OrganizationsResponse } from '../model/OrganizationsResponse';

/**
 * Orgs service.
 *
 * @module api/OrgsApi
 * @version 4.0.3
 */
export class OrgsApi {
  /**
   * @description Constructs a new OrgsApi.
   *
   * @alias module:api/OrgsApi
   * @class
   * @param {module:ApiClient} [apiClient] - Optional API client implementation to use,
   * default to {@link module:ApiClient#instanc
    e} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createOrUpdateOrgs operation.
   *
   * @callback moduleapi/OrgsApi~createOrUpdateOrgsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/OrganizationsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:model/OrganizationsRequest} body
   * @param {module:api/OrgsApi~createOrUpdateOrgsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  createOrUpdateOrgs(body, auth, callback) {
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createOrUpdateOrgs");
    }

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = OrganizationsResponse;

    return this.apiClient.callApi(
      '/orgs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the deleteOrg operation.
   *
   * @callback moduleapi/OrgsApi~deleteOrgCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/OrganizationsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} orgId
   * @param {module:api/OrgsApi~deleteOrgCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  deleteOrg(orgId, callback) {
    const postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId === undefined || orgId === null) {
      throw new Error("Missing the required parameter 'orgId' when calling deleteOrg");
    }

    const pathParams = {
      orgId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = OrganizationsResponse;

    return this.apiClient.callApi(
      '/orgs/{orgId}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getAllOrgs operation.
   *
   * @callback moduleapi/OrgsApi~getAllOrgsCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/OrganizationsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {module:api/OrgsApi~getAllOrgsCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  getAllOrgs(callback) {
    const postBody = null;

    const pathParams = {

    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = OrganizationsResponse;

    return this.apiClient.callApi(
      '/orgs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
   * Callback function to receive the result of the getOrg operation.
   *
   * @callback moduleapi/OrgsApi~getOrgCallback
   * @param {string} error - Error message, if any.
   * @param {module:model/OrganizationsResponse{ data The data returned by the service call.
   * @param {string} response - The complete HTTP response.
   */

  /**
   * @param {string} orgId
   * @param {module:api/OrgsApi~getOrgCallback} callback - The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}.
   */
  getOrg(orgId, callback) {
    const postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId === undefined || orgId === null) {
      throw new Error("Missing the required parameter 'orgId' when calling getOrg");
    }

    const pathParams = {
      orgId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = OrganizationsResponse;

    return this.apiClient.callApi(
      '/orgs/{orgId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
}
