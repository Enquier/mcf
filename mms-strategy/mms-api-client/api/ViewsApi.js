/*
 * MMS Reference Implementation API
 * Documentation for MMS API
 *
 * OpenAPI spec version: 4.0.3
 * Contact: mms@openmbee.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient';
import { DocumentsResponse } from '../model/DocumentsResponse';
import { ElementsRequest } from '../model/ElementsRequest';
import { ElementsResponse } from '../model/ElementsResponse';
import { MountsResponse } from '../model/MountsResponse';
import { ViewGroupsResponse } from '../model/ViewGroupsResponse';

/**
* Views service.
* @module api/ViewsApi
* @version 4.0.3
*/
export class ViewsApi {
  /**
    * Constructs a new ViewsApi.
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
     * Callback function to receive the result of the createOrUpdateViews operation.
     * @callback moduleapi/ViewsApi~createOrUpdateViewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElementsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {module:model/ElementsRequest} body
     * @param {String} projectId
     * @param {String} refId
     * @param {Object} opts Optional parameters
     * @param {String} opts.overwrite
     * @param {module:api/ViewsApi~createOrUpdateViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  createOrUpdateViews(body, projectId, refId, opts, callback) {
    opts = opts || {};
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createOrUpdateViews");
    }
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling createOrUpdateViews");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling createOrUpdateViews");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {
      overwrite: opts.overwrite,
    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = ElementsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/views',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getDocuments operation.
     * @callback moduleapi/ViewsApi~getDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} projectId
     * @param {String} refId
     * @param {Object} opts Optional parameters
     * @param {String} opts.commitId
     * @param {module:api/ViewsApi~getDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getDocuments(projectId, refId, opts, callback) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getDocuments");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getDocuments");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {
      commitId: opts.commitId,
    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = DocumentsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/documents',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getGroups operation.
     * @callback moduleapi/ViewsApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewGroupsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} projectId
     * @param {String} refId
     * @param {module:api/ViewsApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getGroups(projectId, refId, callback) {
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getGroups");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getGroups");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {

    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = ViewGroupsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/groups',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getMounts operation.
     * @callback moduleapi/ViewsApi~getMountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} projectId
     * @param {String} refId
     * @param {Object} opts Optional parameters
     * @param {String} opts.commitId
     * @param {module:api/ViewsApi~getMountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getMounts(projectId, refId, opts, callback) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getMounts");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getMounts");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {
      commitId: opts.commitId,
    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = MountsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/mounts',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getView operation.
     * @callback moduleapi/ViewsApi~getViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElementsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {String} projectId
     * @param {String} refId
     * @param {String} viewId
     * @param {Object} opts Optional parameters
     * @param {String} opts.commitId
     * @param {module:api/ViewsApi~getViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getView(projectId, refId, viewId, opts, callback) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getView");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getView");
    }
    // verify the required parameter 'viewId' is set
    if (viewId === undefined || viewId === null) {
      throw new Error("Missing the required parameter 'viewId' when calling getView");
    }

    const pathParams = {
      projectId, refId, viewId,
    };
    const queryParams = {
      commitId: opts.commitId,
    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = ElementsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/views/{viewId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
  /**
     * Callback function to receive the result of the getViews operation.
     * @callback moduleapi/ViewsApi~getViewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElementsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
     * @param {module:model/ElementsRequest} body
     * @param {String} projectId
     * @param {String} refId
     * @param {Object} opts Optional parameters
     * @param {String} opts.commitId
     * @param {module:api/ViewsApi~getViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
  getViews(body, projectId, refId, opts, callback) {
    opts = opts || {};
    const postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling getViews");
    }
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error("Missing the required parameter 'projectId' when calling getViews");
    }
    // verify the required parameter 'refId' is set
    if (refId === undefined || refId === null) {
      throw new Error("Missing the required parameter 'refId' when calling getViews");
    }

    const pathParams = {
      projectId, refId,
    };
    const queryParams = {
      commitId: opts.commitId,
    };
    const headerParams = {

    };
    const formParams = {

    };

    const authNames = ['basicAuth', 'bearerToken'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json'];
    const returnType = ElementsResponse;

    return this.apiClient.callApi(
      '/projects/{projectId}/refs/{refId}/views',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
}
